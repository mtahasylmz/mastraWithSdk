"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@upstash";
exports.ids = ["vendor-chunks/@upstash"];
exports.modules = {

/***/ "(rsc)/./node_modules/@upstash/vector/dist/chunk-HESEGT2A.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@upstash/vector/dist/chunk-HESEGT2A.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FusionAlgorithm: () => (/* binding */ FusionAlgorithm),\n/* harmony export */   HttpClient: () => (/* binding */ HttpClient),\n/* harmony export */   Index: () => (/* binding */ Index),\n/* harmony export */   QueryMode: () => (/* binding */ QueryMode),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   WeightingStrategy: () => (/* binding */ WeightingStrategy)\n/* harmony export */ });\n// src/error/index.ts\nvar UpstashError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"UpstashError\";\n  }\n};\n\n// src/http/index.ts\nvar HttpClient = class {\n  baseUrl;\n  headers;\n  options;\n  retry;\n  constructor(config) {\n    this.options = {\n      cache: config.cache,\n      signal: config.signal\n    };\n    this.baseUrl = config.baseUrl.replace(/\\/$/, \"\");\n    this.headers = {\n      \"Content-Type\": \"application/json\",\n      ...config.headers\n    };\n    this.retry = typeof config?.retry === \"boolean\" && config?.retry === false ? {\n      attempts: 1,\n      backoff: () => 0\n    } : {\n      attempts: config?.retry?.retries ?? 5,\n      backoff: config?.retry?.backoff ?? ((retryCount) => Math.exp(retryCount) * 50)\n    };\n  }\n  async request(req) {\n    const requestOptions = {\n      cache: this.options.cache,\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify(req.body),\n      keepalive: true,\n      signal: this.options.signal\n    };\n    let res = null;\n    let error = null;\n    for (let i = 0; i <= this.retry.attempts; i++) {\n      try {\n        res = await fetch([this.baseUrl, ...req.path ?? []].join(\"/\"), requestOptions);\n        break;\n      } catch (error_) {\n        if (this.options.signal?.aborted) {\n          const myBlob = new Blob([\n            JSON.stringify({ result: this.options.signal.reason ?? \"Aborted\" })\n          ]);\n          const myOptions = {\n            status: 200,\n            statusText: this.options.signal.reason ?? \"Aborted\"\n          };\n          res = new Response(myBlob, myOptions);\n          break;\n        }\n        error = error_;\n        if (i < this.retry.attempts) {\n          await new Promise((r) => setTimeout(r, this.retry.backoff(i)));\n        }\n      }\n    }\n    if (!res) {\n      throw error ?? new Error(\"Exhausted all retries\");\n    }\n    const body = await res.json();\n    if (!res.ok) {\n      throw new UpstashError(`${body.error}`);\n    }\n    return { result: body.result, error: body.error };\n  }\n};\n\n// src/commands/client/query/types.ts\nvar WeightingStrategy = /* @__PURE__ */ ((WeightingStrategy2) => {\n  WeightingStrategy2[\"IDF\"] = \"IDF\";\n  return WeightingStrategy2;\n})(WeightingStrategy || {});\nvar FusionAlgorithm = /* @__PURE__ */ ((FusionAlgorithm2) => {\n  FusionAlgorithm2[\"RRF\"] = \"RRF\";\n  FusionAlgorithm2[\"DBSF\"] = \"DBSF\";\n  return FusionAlgorithm2;\n})(FusionAlgorithm || {});\nvar QueryMode = /* @__PURE__ */ ((QueryMode2) => {\n  QueryMode2[\"HYBRID\"] = \"HYBRID\";\n  QueryMode2[\"DENSE\"] = \"DENSE\";\n  QueryMode2[\"SPARSE\"] = \"SPARSE\";\n  return QueryMode2;\n})(QueryMode || {});\n\n// src/commands/command.ts\nvar Command = class {\n  payload;\n  endpoint;\n  constructor(command, endpoint) {\n    this.payload = command;\n    this.endpoint = endpoint;\n  }\n  /**\n   * Execute the command using a client.\n   */\n  async exec(client) {\n    const { result, error } = await client.request({\n      body: this.payload,\n      path: [this.endpoint]\n    });\n    if (error) {\n      throw new UpstashError(error);\n    }\n    if (result === void 0) {\n      throw new TypeError(\"Request did not return a result\");\n    }\n    return result;\n  }\n};\n\n// src/commands/client/query/query-many/index.ts\nvar QueryManyCommand = class extends Command {\n  constructor(payload, options) {\n    let endpoint = \"query\";\n    const hasData = payload.some((p) => p.data);\n    endpoint = hasData ? \"query-data\" : \"query\";\n    if (options?.namespace) {\n      endpoint = `${endpoint}/${options.namespace}`;\n    }\n    super(payload, endpoint);\n  }\n};\n\n// src/commands/client/query/query-single/index.ts\nvar QueryCommand = class extends Command {\n  constructor(payload, options) {\n    let endpoint = \"query\";\n    if (\"data\" in payload) {\n      endpoint = \"query-data\";\n    } else if (!payload.vector && !payload.sparseVector) {\n      throw new UpstashError(\"Either data, vector or sparseVector should be provided.\");\n    }\n    if (options?.namespace) {\n      endpoint = `${endpoint}/${options.namespace}`;\n    }\n    super(payload, endpoint);\n  }\n};\n\n// src/commands/client/delete/index.ts\nvar DeleteCommand = class extends Command {\n  constructor(payload, options) {\n    let endpoint = \"delete\";\n    if (options?.namespace) {\n      endpoint = `${endpoint}/${options.namespace}`;\n    }\n    if (typeof payload === \"string\" || typeof payload === \"number\") {\n      super(\n        {\n          ids: [payload]\n        },\n        endpoint\n      );\n    } else if (Array.isArray(payload)) {\n      super(\n        {\n          ids: payload\n        },\n        endpoint\n      );\n    } else if (typeof payload === \"object\") {\n      super(payload, endpoint);\n    }\n  }\n};\n\n// src/commands/client/upsert/index.ts\nvar UpsertCommand = class extends Command {\n  constructor(payload, opts) {\n    let endpoint = \"upsert\";\n    if (Array.isArray(payload)) {\n      const isUpsert = payload.some((p) => isVectorPayload(p));\n      endpoint = isUpsert ? \"upsert\" : \"upsert-data\";\n    } else {\n      endpoint = isVectorPayload(payload) ? \"upsert\" : \"upsert-data\";\n    }\n    if (opts?.namespace) {\n      endpoint = `${endpoint}/${opts.namespace}`;\n    }\n    super(payload, endpoint);\n  }\n};\nvar isVectorPayload = (payload) => {\n  return \"vector\" in payload || \"sparseVector\" in payload;\n};\n\n// src/commands/client/fetch/index.ts\nvar FetchCommand = class extends Command {\n  constructor([payload, opts]) {\n    let endpoint = \"fetch\";\n    if (opts?.namespace) {\n      endpoint = `${endpoint}/${opts.namespace}`;\n      delete opts.namespace;\n    }\n    if (Array.isArray(payload)) {\n      super({ ids: payload, ...opts }, endpoint);\n    } else if (typeof payload === \"object\") {\n      super({ ...payload, ...opts }, endpoint);\n    } else {\n      throw new Error(\"Invalid payload\");\n    }\n  }\n};\n\n// src/commands/client/range/index.ts\nvar RangeCommand = class extends Command {\n  constructor(payload, options) {\n    let endpoint = \"range\";\n    if (options?.namespace) {\n      endpoint = `${endpoint}/${options.namespace}`;\n    }\n    super(payload, endpoint);\n  }\n};\n\n// src/commands/client/reset/index.ts\nvar ResetCommand = class extends Command {\n  constructor(options) {\n    let endpoint = \"reset\";\n    if (options?.namespace) {\n      endpoint = `${endpoint}/${options.namespace}`;\n    } else if (options?.all) {\n      endpoint = `${endpoint}?all`;\n    }\n    super([], endpoint);\n  }\n};\n\n// src/commands/client/info/index.ts\nvar InfoCommand = class extends Command {\n  constructor() {\n    const endpoint = \"info\";\n    super([], endpoint);\n  }\n};\n\n// src/commands/client/resumable-query/resume.ts\nvar ResumeQueryCommand = class extends Command {\n  constructor(payload) {\n    super(payload, \"resumable-query-next\");\n  }\n};\n\n// src/commands/client/resumable-query/start.ts\nvar StartResumableQueryCommand = class extends Command {\n  constructor(payload, namespace) {\n    let endpoint = \"resumable-query\";\n    if (\"data\" in payload) {\n      endpoint = \"resumable-query-data\";\n    }\n    if (namespace) {\n      endpoint = `${endpoint}/${namespace}`;\n    }\n    super(payload, endpoint);\n  }\n};\n\n// src/commands/client/resumable-query/stop.ts\nvar StopResumableQueryCommand = class extends Command {\n  constructor(payload) {\n    super(payload, \"resumable-query-end\");\n  }\n};\n\n// src/commands/client/resumable-query/index.ts\nvar ResumableQuery = class {\n  uuid;\n  start;\n  fetchNext;\n  stop;\n  constructor(payload, client, namespace) {\n    this.start = async () => {\n      const result = await new StartResumableQueryCommand(payload, namespace).exec(\n        client\n      );\n      this.uuid = result.uuid;\n      return result;\n    };\n    this.fetchNext = (additionalK) => {\n      if (!this.uuid) {\n        throw new Error(\n          \"The resumable query has already been stopped. Please start another resumable query.\"\n        );\n      }\n      return new ResumeQueryCommand({ uuid: this.uuid, additionalK }).exec(client);\n    };\n    this.stop = async () => {\n      if (!this.uuid) {\n        throw new Error(\"Resumable query has not been started. Call start() first.\");\n      }\n      const result = await new StopResumableQueryCommand({ uuid: this.uuid }).exec(client);\n      this.uuid = \"\";\n      return result;\n    };\n  }\n};\n\n// src/commands/client/namespace/index.ts\nvar Namespace = class {\n  client;\n  namespace;\n  /**\n   * Create a new index namespace client\n   *\n   * @example\n   * ```typescript\n   * const index = new Index({\n   *  url: \"<UPSTASH_VECTOR_REST_URL>\",\n   *  token: \"<UPSTASH_VECTOR_REST_TOKEN>\",\n   * });\n   *\n   * const namespace = index.namespace(\"ns\");\n   * ```\n   */\n  constructor(client, namespace) {\n    this.client = client;\n    this.namespace = namespace;\n  }\n  /**\n   * Upserts (Updates and Inserts) specific items into the index namespace.\n   * It's used for adding new items to the index namespace or updating existing ones.\n   *\n   * @example\n   * ```js\n   * const upsertArgs = {\n   *   id: '123',\n   *   vector: [0.42, 0.87, ...],\n   *   metadata: { property1: 'value1', property2: 'value2' }\n   * };\n   * const upsertResult = await index.namespace(\"ns\").upsert(upsertArgs);\n   * console.log(upsertResult); // Outputs the result of the upsert operation\n   * ```\n   *\n   * @param {CommandArgs<typeof UpsertCommand>} args - The arguments for the upsert command.\n   * @param {number|string} args.id - The unique identifier for the item being upserted.\n   * @param {number[]} args.vector - The feature vector associated with the item.\n   * @param {Dict} [args.metadata] - Optional metadata to be associated with the item.\n   *\n   * @returns {string} A promise that resolves with the result of the upsert operation after the command is executed.\n   */\n  upsert = (args) => new UpsertCommand(args, { namespace: this.namespace }).exec(this.client);\n  /*\n   * Updates specific items in the index.\n   * It's used for updating existing items in the index.\n   *\n   * @example\n   * ```js\n   * const updateArgs = {\n   *   id: '123',\n   *   metadata: { updatedProperty: 'value1' }\n   * };\n   * const updateResult = await index.update(updateArgs);\n   * console.log(updateResult); // Outputs the result of the update operation\n   * ```\n   *\n   * @param {CommandArgs<typeof UpdateCommand>} args - The arguments for the update command.\n   * @param {number|string} args.id - The unique identifier for the item being updated.\n   * @param {number[]} args.vector - The feature vector associated with the item.\n   * @param {Record<string, unknown>} [args.metadata] - Optional metadata to be associated with the item.\n   *\n   * @returns {Promise<{updated: number}>} A promise that returns the number of items successfully updated.\n   */\n  update = (args) => new UpdateCommand(args, { namespace: this.namespace }).exec(this.client);\n  /**\n   * Fetches specific items from the index by their IDs or by an id prefix.\n   *\n   * Note: While using id prefix, the paginated `range` command is recommended to prevent timeouts on large result sets.\n   *\n   * @example\n   * ```js\n   * // Using ids\n   * await index.namespace(\"ns\").fetch([\"test-1\", \"test-2\"], { includeMetadata: true });\n   *\n   * // Using id prefix\n   * await index.namespace(\"ns\").fetch({ prefix: \"test-\" });\n   * ```\n   *\n   * @param {...CommandArgs<typeof FetchCommand>} args - The arguments for the fetch command.\n   * @param {FetchPayload} args[0] - An array of IDs or the id prefix of the items to be fetched.\n   * @param {FetchCommandOptions} args[1] - Options for the fetch operation.\n   * @param {boolean} [args[1].includeMetadata=false] - Optionally include metadata of the fetched items.\n   * @param {boolean} [args[1].includeVectors=false] - Optionally include feature vectors of the fetched items.\n   * @param {string} [args[1].namespace = \"\"] - The namespace of the index to fetch items from.\n   *\n   * @returns {Promise<FetchReturnResponse<TMetadata>[]>} A promise that resolves with an array of fetched items or null if not found, after the command is executed.\n   */\n  fetch = (...args) => {\n    if (args[1]) {\n      args[1].namespace = this.namespace;\n    } else {\n      args[1] = { namespace: this.namespace };\n    }\n    return new FetchCommand(args).exec(this.client);\n  };\n  /**\n   * Queries an index namespace with specified parameters.\n   * This method creates and executes a query command on an index based on the provided arguments.\n   *\n   * @example\n   * ```js\n   * await index.namespace(\"ns\").query({\n   *  topK: 3,\n   *  vector: [ 0.22, 0.66 ],\n   *  filter: \"age >= 23 and (type = \\'turtle\\' OR type = \\'cat\\')\"\n   * });\n   * ```\n   *\n   * @param {Object} args - The arguments for the query command.\n   * @param {number[]} args.vector - An array of numbers representing the feature vector for the query.\n   *                                This vector is utilized to find the most relevant items in the index.\n   * @param {number} args.topK - The desired number of top results to be returned, based on relevance or similarity to the query vector.\n   * @param {string} [args.filter] - An optional filter string to be used in the query. The filter string is used to narrow down the query results.\n   * @param {boolean} [args.includeVectors=false] - When set to true, includes the feature vectors of the returned items in the response.\n   * @param {boolean} [args.includeMetadata=false] - When set to true, includes additional metadata of the returned items in the response.\n   *\n   * @returns A promise that resolves with an array of query result objects when the request to query the index is completed.\n   */\n  query = (args) => new QueryCommand(args, { namespace: this.namespace }).exec(this.client);\n  /**\n   * Initializes a resumable query operation on the vector database.\n   * This method allows for querying large result sets in multiple chunks or implementing pagination.\n   *\n   * @template TMetadata\n   * @param {ResumableQueryPayload} args - The arguments for the resumable query.\n   * @param {number} args.maxIdle - The maximum idle time in seconds before the query session expires.\n   * @param {number} args.topK - The number of top results to return in each fetch operation.\n   * @param {number[]} args.vector - The query vector used for similarity search.\n   * @param {boolean} [args.includeMetadata] - Whether to include metadata in the query results.\n   * @param {boolean} [args.includeVectors] - Whether to include vectors in the query results.\n   * @param {Object} [options] - Additional options for the query.\n   * @returns {Promise<ResumableQuery<TMetadata>>} A promise that resolves to a ResumableQuery object.\n   * @example\n   * const { result, fetchNext, stop } = await index.namespace(\"ns\").resumableQuery({\n   *   maxIdle: 3600,\n   *   topK: 50,\n   *   vector: [0.1, 0.2, 0.3, ...],\n   *   includeMetadata: true,\n   *   includeVectors: true\n   * }, { namespace: 'my-namespace' });\n   *\n   * const firstBatch = await fetchNext(10);\n   * const secondBatch = await fetchNext(10);\n   * await stop(); // End the query session\n   */\n  resumableQuery = async (args) => {\n    const resumableQuery = new ResumableQuery(args, this.client, this.namespace);\n    const initialQuery = await resumableQuery.start();\n    const { fetchNext, stop } = resumableQuery;\n    return { fetchNext, stop, result: initialQuery.scores };\n  };\n  /**\n     * Deletes items from the index namespace by id, by id prefix, or by filter.\n     *\n     * @example\n     * ```js\n     * // Delete by id\n     * await index.namespace(\"ns\").delete(\"test-id\");\n  \n     * // Delete by ids\n     * await index.namespace(\"ns\").delete([\"test-id1\", \"test-id2\"]);\n  \n     * // Delete by id prefix\n     * await index.namespace(\"ns\").delete({ prefix: \"test-\" });\n  \n     * // Delete by filter\n     * await index.namespace(\"ns\").delete({ filter: \"age >= 23\" });\n     * ```\n     *\n     * @param args - A single id, an array of ids, a prefix, or a filter to delete items from the index.\n     * @returns Number of deleted vectors in the format `{ deleted: number }`.If no vectors are deleted, returns `{ deleted: 0 }`.\n     */\n  delete = (args) => new DeleteCommand(args, { namespace: this.namespace }).exec(this.client);\n  /**\n   * Retrieves a paginated range of items from the index. Optionally filter results by an id prefix.\n   * Returns items in batches with a cursor for pagination.\n   *\n   * @example\n   * ```js\n   * const args = {\n   *   limit: 10,\n   *   includeVectors: true,\n   *   includeMetadata: false\n   * };\n   * await index.namespace(\"ns\").range(args);\n   *\n   * // Use the cursor to get the next page of results\n   * const nextPage = await index.namespace(\"ns\").range({\n   *   // You have to pass the arguments from the first call\n   *   ...args,\n   *   cursor: rangeResult.nextCursor,\n   * });\n   * ```\n   *\n   * @param {CommandArgs<typeof RangeCommand>} args - The arguments for the range command.\n   * @param {string} [args.prefix] - The prefix of the items to be fetched.\n   * @param {number|string} args.cursor - The starting point (cursor) for the range query.\n   * @param {number} args.limit - The maximum number of items to return in this range.\n   * @param {boolean} [args.includeVectors=false] - Optionally include the feature vectors of the items in the response.\n   * @param {boolean} [args.includeMetadata=false] - Optionally include additional metadata of the items in the response.\n   *\n   * @returns {Promise<RangeReturnResponse<TMetadata>>} A promise that resolves with the response containing the next cursor and an array of vectors, after the command is executed.\n   */\n  range = (args) => new RangeCommand(args, { namespace: this.namespace }).exec(this.client);\n  /**\n   * It's used for wiping all the vectors in a index namespace.\n   *\n   * @example\n   * ```js\n   * await index.namespace(\"ns\").reset();\n   * console.log('Index namespace has been reset');\n   * ```\n   *\n   * @returns {Promise<string>} A promise that resolves with the result of the reset operation after the command is executed.\n   */\n  reset = () => new ResetCommand({ namespace: this.namespace }).exec(this.client);\n};\n\n// src/commands/client/update/index.ts\nvar UpdateCommand = class extends Command {\n  constructor(payload, opts) {\n    let endpoint = \"update\";\n    if (opts?.namespace) {\n      endpoint = `${endpoint}/${opts.namespace}`;\n    }\n    super(payload, endpoint);\n  }\n};\n\n// src/commands/management/namespaces/list/index.ts\nvar ListNamespacesCommand = class extends Command {\n  constructor() {\n    const endpoint = \"list-namespaces\";\n    super([], endpoint);\n  }\n};\n\n// src/commands/management/namespaces/delete/index.ts\nvar DeleteNamespaceCommand = class extends Command {\n  constructor(namespace) {\n    const endpoint = `delete-namespace/${namespace}`;\n    super([], endpoint);\n  }\n};\n\n// src/vector.ts\nvar Index = class {\n  client;\n  /**\n   * Create a new vector db client\n   *\n   * @example\n   * ```typescript\n   * const index = new Index({\n   *  url: \"<UPSTASH_VECTOR_REST_URL>\",\n   *  token: \"<UPSTASH_VECTOR_REST_TOKEN>\",\n   * });\n   * ```\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  namespace = (namespace) => new Namespace(this.client, namespace);\n  /**\n     * Deletes items from the index by id, by id prefix, or by filter.\n     *\n     * @example\n     * ```js\n     * // Delete by id\n     * await index.delete(\"test-id\");\n  \n     * // Delete by ids\n     * await index.delete([\"test-id1\", \"test-id2\"]);\n  \n     * // Delete by id prefix\n     * await index.delete({ prefix: \"test-\" });\n  \n     * // Delete by filter\n     * await index.delete({ filter: \"age >= 23\" });\n     * ```\n     *\n     * @param args - A single id, an array of ids, a prefix, or a filter to delete items from the index.\n     * @returns Number of deleted vectors in the format `{ deleted: number }`.If no vectors are deleted, returns `{ deleted: 0 }`.\n     */\n  delete = (args, options) => new DeleteCommand(args, options).exec(this.client);\n  /**\n   * Queries an index with specified parameters.\n   * This method creates and executes a query command on an index based on the provided arguments.\n   *\n   * @example\n   * ```js\n   * await index.query({\n   *  topK: 3,\n   *  vector: [ 0.22, 0.66 ],\n   *  filter: \"age >= 23 and (type = \\'turtle\\' OR type = \\'cat\\')\"\n   * });\n   * ```\n   *\n   * @param {Object} args - The arguments for the query command.\n   * @param {number[]} args.vector - An array of numbers representing the feature vector for the query.\n   *                                This vector is utilized to find the most relevant items in the index.\n   * @param {number} args.topK - The desired number of top results to be returned, based on relevance or similarity to the query vector.\n   * @param {string} [args.filter] - An optional filter string to be used in the query. The filter string is used to narrow down the query results.\n   * @param {boolean} [args.includeVectors=false] - When set to true, includes the feature vectors of the returned items in the response.\n   * @param {boolean} [args.includeMetadata=false] - When set to true, includes additional metadata of the returned items in the response.\n   * @param {boolean} [args.includeData=false] - When set to true, includes data - string - of the returned items in the response.\n   *\n   *  A promise that resolves with an array of query result objects when the request to query the index is completed.\n   */\n  query = (args, options) => new QueryCommand(args, options).exec(this.client);\n  /**\n   * Queries an index with specified parameters.\n   * This method creates and executes a query command on an index based on the provided arguments.\n   *\n   * @example\n   * ```js\n   * await index.queryMany([\n   * {\n   *     topK: 3,\n   *     vector: [0.22, 0.66],\n   *     filter: \"age >= 23 and (type = 'turtle' OR type = 'cat')\",\n   * },\n   * {\n   *     topK: 3,\n   *     vector: [0.45, 0.52],\n   *     filter: \"age >= 27 and (type = 'rabbit' OR type = 'dog')\",\n   * },\n   * ]);\n   *\n   * ```\n   *\n   * @param {Object} args - The arguments for the query command.\n   * @param {number[]} args.vector - An array of numbers representing the feature vector for the query.\n   *                                This vector is utilized to find the most relevant items in the index.\n   * @param {number} args.topK - The desired number of top results to be returned, based on relevance or similarity to the query vector.\n   * @param {string} [args.filter] - An optional filter string to be used in the query. The filter string is used to narrow down the query results.\n   * @param {boolean} [args.includeVectors=false] - When set to true, includes the feature vectors of the returned items in the response.\n   * @param {boolean} [args.includeMetadata=false] - When set to true, includes additional metadata of the returned items in the response.\n   * @param {boolean} [args.includeData=false] - When set to true, includes data - string - of the returned items in the response.\n   *\n   *  A promise that resolves with an array of arrays of query result objects,\n   *  where each inner array represents a group of results matching a specific query condition.\n   */\n  queryMany = (args, options) => new QueryManyCommand(args, options).exec(this.client);\n  /**\n   * Initializes a resumable query operation on the vector database.\n   * This method allows for querying large result sets in multiple chunks or implementing pagination.\n   *\n   * @template TMetadata\n   * @param {ResumableQueryPayload} args - The arguments for the resumable query.\n   * @param {number} args.maxIdle - The maximum idle time in seconds before the query session expires.\n   * @param {number} args.topK - The number of top results to return in each fetch operation.\n   * @param {number[]} args.vector - The query vector used for similarity search.\n   * @param {boolean} [args.includeMetadata] - Whether to include metadata in the query results.\n   * @param {boolean} [args.includeVectors] - Whether to include vectors in the query results.\n   * @param {Object} [options] - Additional options for the query.\n   * @param {string} [options.namespace] - The namespace to query within.\n   * @returns {Promise<ResumableQuery<TMetadata>>} A promise that resolves to a ResumableQuery object.\n   * @example\n   * const { result, fetchNext, stop } = await index.resumableQuery({\n   *   maxIdle: 3600,\n   *   topK: 50,\n   *   vector: [0.1, 0.2, 0.3, ...],\n   *   includeMetadata: true,\n   *   includeVectors: true\n   * }, { namespace: 'my-namespace' });\n   *\n   * const firstBatch = await fetchNext(10);\n   * const secondBatch = await fetchNext(10);\n   * await stop(); // End the query session\n   */\n  resumableQuery = async (args, options) => {\n    const resumableQuery = new ResumableQuery(args, this.client, options?.namespace);\n    const initialQuery = await resumableQuery.start();\n    const { fetchNext, stop } = resumableQuery;\n    return { fetchNext, stop, result: initialQuery.scores };\n  };\n  /**\n   * Upserts (Updates and Inserts) specific items into the index.\n   * It's used for adding new items to the index or updating existing ones.\n   *\n   * @example\n   * ```js\n   * const upsertArgs = {\n   *   id: '123',\n   *   vector: [0.42, 0.87, ...],\n   *   metadata: { property1: 'value1', property2: 'value2' }\n   * };\n   * const upsertResult = await index.upsert(upsertArgs);\n   * console.log(upsertResult); // Outputs the result of the upsert operation\n   * ```\n   *\n   * @param {CommandArgs<typeof UpsertCommand>} args - The arguments for the upsert command.\n   * @param {number|string} args.id - The unique identifier for the item being upserted.\n   * @param {number[]} args.vector - The feature vector associated with the item.\n   * @param {Record<string, unknown>} [args.metadata] - Optional metadata to be associated with the item.\n   *\n   * @returns {string} A promise that resolves with the result of the upsert operation after the command is executed.\n   */\n  upsert = (args, options) => new UpsertCommand(args, options).exec(this.client);\n  /*\n   * Updates specific items in the index.\n   * It's used for updating existing items in the index.\n   *\n   * @example\n   * ```js\n   * const updateArgs = {\n   *   id: '123',\n   *   vector: [0.42, 0.87, ...],\n   *   metadata: { property1: 'value1', property2: 'value2' }\n   * };\n   * const updateResult = await index.update(updateArgs);\n   * console.log(updateResult); // Outputs the result of the update operation\n   * ```\n   *\n   * @param {CommandArgs<typeof UpdateCommand>} args - The arguments for the update command.\n   * @param {number|string} args.id - The unique identifier for the item being updated.\n   * @param {number[]} args.vector - The feature vector associated with the item.\n   * @param {Record<string, unknown>} [args.metadata] - Optional metadata to be associated with the item.\n   * @param {string} [args.namespace] - The namespace to update the item in.\n   *\n   * @returns {Promise<{updated: number}>} A promise that returns the number of items successfully updated.\n   */\n  update = (args, options) => new UpdateCommand(args, options).exec(this.client);\n  /**\n   * Fetches specific items from the index by their IDs or by an id prefix.\n   *\n   * Note: While using id prefix, the paginated `range` command is recommended to prevent timeouts on large result sets.\n   *\n   * @example\n   * ```js\n   * // Using ids\n   * await index.fetch([\"test-1\", \"test-2\"], { includeMetadata: true });\n   *\n   * // Using id prefix\n   * await index.fetch({ prefix: \"test-\" });\n   * ```\n   *\n   * @param {...CommandArgs<typeof FetchCommand>} args - The arguments for the fetch command.\n   * @param {FetchPayload} args[0] - An array of IDs or the id prefix of the items to be fetched.\n   * @param {FetchCommandOptions} args[1] - Options for the fetch operation.\n   * @param {boolean} [args[1].includeMetadata=false] - Optionally include metadata of the fetched items.\n   * @param {boolean} [args[1].includeVectors=false] - Optionally include feature vectors of the fetched items.\n   * @param {string} [args[1].namespace = \"\"] - The namespace of the index to fetch items from.\n   *\n   * @returns {Promise<FetchReturnResponse<TMetadata>[]>} A promise that resolves with an array of fetched items or null if not found, after the command is executed.\n   */\n  fetch = (...args) => new FetchCommand(args).exec(this.client);\n  /**\n   * It's used for wiping the index.\n   *\n   * By default, resets the default namespace:\n   *\n   * @example\n   * ```js\n   * await index.reset();\n   * console.log('Default namespace has been reset');\n   * ```\n   *\n   * To reset a namespace, call reset like:\n   *\n   * @example\n   * ```js\n   * await index.reset({ namespace: \"ns\" });\n   * console.log('Namespace ns has been reset');\n   * ```\n   *\n   * If you want to reset all namespaces, call reset like:\n   *\n   * @example\n   * ```js\n   * await index.reset({ all: true });\n   * console.log('All namespaces have been reset');\n   * ```\n   *\n   * @returns {Promise<string>} A promise that resolves with the result of the reset operation after the command is executed.\n   */\n  reset = (options) => new ResetCommand(options).exec(this.client);\n  /**\n   * Retrieves a paginated range of items from the index. Optionally filter results by an id prefix.\n   * Returns items in batches with a cursor for pagination.\n   *\n   * @example\n   * ```js\n   * const args = {\n   *   limit: 10,\n   *   includeVectors: true,\n   *   includeMetadata: false\n   * };\n   * await index.range(args);\n   *\n   * // Use the cursor to get the next page of results\n   * const nextPage = await index.range({\n   *   // You have to pass the arguments from the first call\n   *   ...args,\n   *   cursor: rangeResult.nextCursor,\n   * });\n   * ```\n   *\n   * @param {CommandArgs<typeof RangeCommand>} args - The arguments for the range command.\n   * @param {string} [args.prefix] - The prefix of the items to be fetched.\n   * @param {number|string} args.cursor - The starting point (cursor) for the range query.\n   * @param {number} args.limit - The maximum number of items to return in this range.\n   * @param {boolean} [args.includeVectors=false] - Optionally include the feature vectors of the items in the response.\n   * @param {boolean} [args.includeMetadata=false] - Optionally include additional metadata of the items in the response.\n   *\n   * @returns {Promise<RangeReturnResponse<TMetadata>>} A promise that resolves with the response containing the next cursor and an array of vectors, after the command is executed.\n   */\n  range = (args, options) => new RangeCommand(args, options).exec(this.client);\n  /**\n   * Retrieves info from the index.\n   *\n   * @example\n   * ```js\n   * const infoResults = await index.info();\n   * console.log(infoResults); // Outputs the result of the info operation\n   * ```\n   *\n   * @returns {Promise<InfoResult>} A promise that resolves with the response containing the vectorCount, pendingVectorCount, indexSize, dimension count and similarity algorithm after the command is executed.\n   */\n  info = () => new InfoCommand().exec(this.client);\n  /**\n   * List all namespaces in the vector database.\n   *\n   * @example\n   * ```js\n   * const namespaces = await index.listNamespaces();\n   * console.log(namespaces); // Outputs the list of namespaces\n   * ```\n   *\n   * @returns {Promise<string[]>} A promise that resolves with an array of namespaces after the command is executed.\n   */\n  listNamespaces = () => new ListNamespacesCommand().exec(this.client);\n  /**\n   * Deletes a namespace from the vector database.\n   *\n   * @example\n   * ```js\n   * await index.deleteNamespace('namespace');\n   * console.log('Namespace has been deleted');\n   * ```\n   *\n   * @param {string} namespace - The name of the namespace to be deleted.\n   * @returns {Promise<string>} A promise that resolves with the result of the delete operation after the command is executed.\n   */\n  deleteNamespace = (namespace) => new DeleteNamespaceCommand(namespace).exec(this.client);\n};\n\n// version.ts\nvar VERSION = \"v1.2.1\";\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@upstash/vector/dist/chunk-HESEGT2A.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@upstash/vector/dist/nodejs.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@upstash/vector/dist/nodejs.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FusionAlgorithm: () => (/* reexport safe */ _chunk_HESEGT2A_mjs__WEBPACK_IMPORTED_MODULE_0__.FusionAlgorithm),\n/* harmony export */   Index: () => (/* binding */ Index2),\n/* harmony export */   QueryMode: () => (/* reexport safe */ _chunk_HESEGT2A_mjs__WEBPACK_IMPORTED_MODULE_0__.QueryMode),\n/* harmony export */   WeightingStrategy: () => (/* reexport safe */ _chunk_HESEGT2A_mjs__WEBPACK_IMPORTED_MODULE_0__.WeightingStrategy)\n/* harmony export */ });\n/* harmony import */ var _chunk_HESEGT2A_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-HESEGT2A.mjs */ \"(rsc)/./node_modules/@upstash/vector/dist/chunk-HESEGT2A.mjs\");\n\n\n// src/utils/get-runtime.ts\nfunction getRuntime() {\n  if (typeof process === \"object\" && typeof process.versions == \"object\" && process.versions.bun)\n    return `bun@${process.versions.bun}`;\n  return typeof EdgeRuntime === \"string\" ? \"edge-light\" : `node@${process.version}`;\n}\n\n// src/platforms/nodejs.ts\nvar Index2 = class _Index extends _chunk_HESEGT2A_mjs__WEBPACK_IMPORTED_MODULE_0__.Index {\n  constructor(configOrRequester) {\n    if (configOrRequester !== void 0 && \"request\" in configOrRequester) {\n      super(configOrRequester);\n      return;\n    }\n    const token = configOrRequester?.token ?? process.env.NEXT_PUBLIC_UPSTASH_VECTOR_REST_TOKEN ?? process.env.UPSTASH_VECTOR_REST_TOKEN;\n    const url = configOrRequester?.url ?? process.env.NEXT_PUBLIC_UPSTASH_VECTOR_REST_URL ?? process.env.UPSTASH_VECTOR_REST_URL;\n    if (!token) {\n      throw new Error(\"UPSTASH_VECTOR_REST_TOKEN is missing!\");\n    }\n    if (!url) {\n      throw new Error(\"UPSTASH_VECTOR_REST_URL is missing!\");\n    }\n    if (url.startsWith(\" \") || url.endsWith(\" \") || /\\r|\\n/.test(url)) {\n      console.warn(\"The vector url contains whitespace or newline, which can cause errors!\");\n    }\n    if (token.startsWith(\" \") || token.endsWith(\" \") || /\\r|\\n/.test(token)) {\n      console.warn(\"The vector token contains whitespace or newline, which can cause errors!\");\n    }\n    const enableTelemetry = process.env.UPSTASH_DISABLE_TELEMETRY ? false : configOrRequester?.enableTelemetry ?? true;\n    const telemetryHeaders = enableTelemetry ? {\n      \"Upstash-Telemetry-Sdk\": `upstash-vector-js@${_chunk_HESEGT2A_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION}`,\n      \"Upstash-Telemetry-Platform\": process.env.VERCEL ? \"vercel\" : process.env.AWS_REGION ? \"aws\" : \"unknown\",\n      \"Upstash-Telemetry-Runtime\": getRuntime()\n    } : {};\n    const client = new _chunk_HESEGT2A_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpClient({\n      baseUrl: url,\n      retry: configOrRequester?.retry,\n      headers: { authorization: `Bearer ${token}`, ...telemetryHeaders },\n      cache: configOrRequester?.cache === false ? void 0 : configOrRequester?.cache || \"no-store\",\n      signal: configOrRequester?.signal\n    });\n    super(client);\n  }\n  /**\n   * Create a new Upstash Vector instance from environment variables.\n   *\n   * Use this to automatically load connection secrets from your environment\n   * variables. For instance when using the Vercel integration.\n   *\n   * When used on the Cloudflare Workers, you can just pass the \"env\" context provided by Cloudflare.\n   * Else, this tries to load `UPSTASH_VECTOR_REST_URL` and `UPSTASH_VECTOR_REST_TOKEN` from\n   * your environment using `process.env`.\n   */\n  static fromEnv(env, config) {\n    const url = env?.UPSTASH_VECTOR_REST_URL || process?.env.UPSTASH_VECTOR_REST_URL;\n    const token = env?.UPSTASH_VECTOR_REST_TOKEN || process?.env.UPSTASH_VECTOR_REST_TOKEN;\n    if (!url) {\n      throw new Error(\"Unable to find environment variable: `UPSTASH_VECTOR_REST_URL`\");\n    }\n    if (!token) {\n      throw new Error(\"Unable to find environment variable: `UPSTASH_VECTOR_REST_TOKEN`\");\n    }\n    return new _Index({ ...config, url, token });\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHVwc3Rhc2gvdmVjdG9yL2Rpc3Qvbm9kZWpzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQU84Qjs7QUFFOUI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFCQUFxQjtBQUN2QyxrRUFBa0UsZ0JBQWdCO0FBQ2xGOztBQUVBO0FBQ0Esa0NBQWtDLHNEQUFLO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCx3REFBTyxDQUFDO0FBQzVEO0FBQ0E7QUFDQSxNQUFNO0FBQ04sdUJBQXVCLDJEQUFVO0FBQ2pDO0FBQ0E7QUFDQSxpQkFBaUIseUJBQXlCLE1BQU0sd0JBQXdCO0FBQ3hFO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBTUUiLCJzb3VyY2VzIjpbIi9ob21lL210YWhhc3lsbXovRGVza3RvcC91cHN0YXNoL21hc3RyYS93aXRoQXBpL25vZGVfbW9kdWxlcy9AdXBzdGFzaC92ZWN0b3IvZGlzdC9ub2RlanMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEZ1c2lvbkFsZ29yaXRobSxcbiAgSHR0cENsaWVudCxcbiAgSW5kZXgsXG4gIFF1ZXJ5TW9kZSxcbiAgVkVSU0lPTixcbiAgV2VpZ2h0aW5nU3RyYXRlZ3lcbn0gZnJvbSBcIi4vY2h1bmstSEVTRUdUMkEubWpzXCI7XG5cbi8vIHNyYy91dGlscy9nZXQtcnVudGltZS50c1xuZnVuY3Rpb24gZ2V0UnVudGltZSgpIHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zID09IFwib2JqZWN0XCIgJiYgcHJvY2Vzcy52ZXJzaW9ucy5idW4pXG4gICAgcmV0dXJuIGBidW5AJHtwcm9jZXNzLnZlcnNpb25zLmJ1bn1gO1xuICByZXR1cm4gdHlwZW9mIEVkZ2VSdW50aW1lID09PSBcInN0cmluZ1wiID8gXCJlZGdlLWxpZ2h0XCIgOiBgbm9kZUAke3Byb2Nlc3MudmVyc2lvbn1gO1xufVxuXG4vLyBzcmMvcGxhdGZvcm1zL25vZGVqcy50c1xudmFyIEluZGV4MiA9IGNsYXNzIF9JbmRleCBleHRlbmRzIEluZGV4IHtcbiAgY29uc3RydWN0b3IoY29uZmlnT3JSZXF1ZXN0ZXIpIHtcbiAgICBpZiAoY29uZmlnT3JSZXF1ZXN0ZXIgIT09IHZvaWQgMCAmJiBcInJlcXVlc3RcIiBpbiBjb25maWdPclJlcXVlc3Rlcikge1xuICAgICAgc3VwZXIoY29uZmlnT3JSZXF1ZXN0ZXIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0b2tlbiA9IGNvbmZpZ09yUmVxdWVzdGVyPy50b2tlbiA/PyBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19VUFNUQVNIX1ZFQ1RPUl9SRVNUX1RPS0VOID8/IHByb2Nlc3MuZW52LlVQU1RBU0hfVkVDVE9SX1JFU1RfVE9LRU47XG4gICAgY29uc3QgdXJsID0gY29uZmlnT3JSZXF1ZXN0ZXI/LnVybCA/PyBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19VUFNUQVNIX1ZFQ1RPUl9SRVNUX1VSTCA/PyBwcm9jZXNzLmVudi5VUFNUQVNIX1ZFQ1RPUl9SRVNUX1VSTDtcbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVUFNUQVNIX1ZFQ1RPUl9SRVNUX1RPS0VOIGlzIG1pc3NpbmchXCIpO1xuICAgIH1cbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVVBTVEFTSF9WRUNUT1JfUkVTVF9VUkwgaXMgbWlzc2luZyFcIik7XG4gICAgfVxuICAgIGlmICh1cmwuc3RhcnRzV2l0aChcIiBcIikgfHwgdXJsLmVuZHNXaXRoKFwiIFwiKSB8fCAvXFxyfFxcbi8udGVzdCh1cmwpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJUaGUgdmVjdG9yIHVybCBjb250YWlucyB3aGl0ZXNwYWNlIG9yIG5ld2xpbmUsIHdoaWNoIGNhbiBjYXVzZSBlcnJvcnMhXCIpO1xuICAgIH1cbiAgICBpZiAodG9rZW4uc3RhcnRzV2l0aChcIiBcIikgfHwgdG9rZW4uZW5kc1dpdGgoXCIgXCIpIHx8IC9cXHJ8XFxuLy50ZXN0KHRva2VuKSkge1xuICAgICAgY29uc29sZS53YXJuKFwiVGhlIHZlY3RvciB0b2tlbiBjb250YWlucyB3aGl0ZXNwYWNlIG9yIG5ld2xpbmUsIHdoaWNoIGNhbiBjYXVzZSBlcnJvcnMhXCIpO1xuICAgIH1cbiAgICBjb25zdCBlbmFibGVUZWxlbWV0cnkgPSBwcm9jZXNzLmVudi5VUFNUQVNIX0RJU0FCTEVfVEVMRU1FVFJZID8gZmFsc2UgOiBjb25maWdPclJlcXVlc3Rlcj8uZW5hYmxlVGVsZW1ldHJ5ID8/IHRydWU7XG4gICAgY29uc3QgdGVsZW1ldHJ5SGVhZGVycyA9IGVuYWJsZVRlbGVtZXRyeSA/IHtcbiAgICAgIFwiVXBzdGFzaC1UZWxlbWV0cnktU2RrXCI6IGB1cHN0YXNoLXZlY3Rvci1qc0Ake1ZFUlNJT059YCxcbiAgICAgIFwiVXBzdGFzaC1UZWxlbWV0cnktUGxhdGZvcm1cIjogcHJvY2Vzcy5lbnYuVkVSQ0VMID8gXCJ2ZXJjZWxcIiA6IHByb2Nlc3MuZW52LkFXU19SRUdJT04gPyBcImF3c1wiIDogXCJ1bmtub3duXCIsXG4gICAgICBcIlVwc3Rhc2gtVGVsZW1ldHJ5LVJ1bnRpbWVcIjogZ2V0UnVudGltZSgpXG4gICAgfSA6IHt9O1xuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBIdHRwQ2xpZW50KHtcbiAgICAgIGJhc2VVcmw6IHVybCxcbiAgICAgIHJldHJ5OiBjb25maWdPclJlcXVlc3Rlcj8ucmV0cnksXG4gICAgICBoZWFkZXJzOiB7IGF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0b2tlbn1gLCAuLi50ZWxlbWV0cnlIZWFkZXJzIH0sXG4gICAgICBjYWNoZTogY29uZmlnT3JSZXF1ZXN0ZXI/LmNhY2hlID09PSBmYWxzZSA/IHZvaWQgMCA6IGNvbmZpZ09yUmVxdWVzdGVyPy5jYWNoZSB8fCBcIm5vLXN0b3JlXCIsXG4gICAgICBzaWduYWw6IGNvbmZpZ09yUmVxdWVzdGVyPy5zaWduYWxcbiAgICB9KTtcbiAgICBzdXBlcihjbGllbnQpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgVXBzdGFzaCBWZWN0b3IgaW5zdGFuY2UgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gICAqXG4gICAqIFVzZSB0aGlzIHRvIGF1dG9tYXRpY2FsbHkgbG9hZCBjb25uZWN0aW9uIHNlY3JldHMgZnJvbSB5b3VyIGVudmlyb25tZW50XG4gICAqIHZhcmlhYmxlcy4gRm9yIGluc3RhbmNlIHdoZW4gdXNpbmcgdGhlIFZlcmNlbCBpbnRlZ3JhdGlvbi5cbiAgICpcbiAgICogV2hlbiB1c2VkIG9uIHRoZSBDbG91ZGZsYXJlIFdvcmtlcnMsIHlvdSBjYW4ganVzdCBwYXNzIHRoZSBcImVudlwiIGNvbnRleHQgcHJvdmlkZWQgYnkgQ2xvdWRmbGFyZS5cbiAgICogRWxzZSwgdGhpcyB0cmllcyB0byBsb2FkIGBVUFNUQVNIX1ZFQ1RPUl9SRVNUX1VSTGAgYW5kIGBVUFNUQVNIX1ZFQ1RPUl9SRVNUX1RPS0VOYCBmcm9tXG4gICAqIHlvdXIgZW52aXJvbm1lbnQgdXNpbmcgYHByb2Nlc3MuZW52YC5cbiAgICovXG4gIHN0YXRpYyBmcm9tRW52KGVudiwgY29uZmlnKSB7XG4gICAgY29uc3QgdXJsID0gZW52Py5VUFNUQVNIX1ZFQ1RPUl9SRVNUX1VSTCB8fCBwcm9jZXNzPy5lbnYuVVBTVEFTSF9WRUNUT1JfUkVTVF9VUkw7XG4gICAgY29uc3QgdG9rZW4gPSBlbnY/LlVQU1RBU0hfVkVDVE9SX1JFU1RfVE9LRU4gfHwgcHJvY2Vzcz8uZW52LlVQU1RBU0hfVkVDVE9SX1JFU1RfVE9LRU47XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIGVudmlyb25tZW50IHZhcmlhYmxlOiBgVVBTVEFTSF9WRUNUT1JfUkVTVF9VUkxgXCIpO1xuICAgIH1cbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCBlbnZpcm9ubWVudCB2YXJpYWJsZTogYFVQU1RBU0hfVkVDVE9SX1JFU1RfVE9LRU5gXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IF9JbmRleCh7IC4uLmNvbmZpZywgdXJsLCB0b2tlbiB9KTtcbiAgfVxufTtcbmV4cG9ydCB7XG4gIEZ1c2lvbkFsZ29yaXRobSxcbiAgSW5kZXgyIGFzIEluZGV4LFxuICBRdWVyeU1vZGUsXG4gIFdlaWdodGluZ1N0cmF0ZWd5XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@upstash/vector/dist/nodejs.mjs\n");

/***/ })

};
;