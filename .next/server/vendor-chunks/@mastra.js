"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mastra";
exports.ids = ["vendor-chunks/@mastra"];
exports.modules = {

/***/ "(ssr)/./node_modules/@mastra/client-js/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@mastra/client-js/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MastraClient: () => (/* binding */ MastraClient)\n/* harmony export */ });\n/* harmony import */ var _ag_ui_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ag-ui/client */ \"(ssr)/./node_modules/@ag-ui/client/dist/index.mjs\");\n/* harmony import */ var _ag_ui_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ag-ui/client */ \"(ssr)/./node_modules/@ag-ui/core/dist/index.mjs\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/cjs/index.js\");\n/* harmony import */ var _ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ai-sdk/ui-utils */ \"(ssr)/./node_modules/@ai-sdk/ui-utils/dist/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(ssr)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _mastra_core_runtime_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mastra/core/runtime-context */ \"(ssr)/./node_modules/@mastra/core/dist/chunk-SGGPJWRQ.js\");\n\n\n\n\n\n\n\n// src/adapters/agui.ts\nvar AGUIAdapter = class extends _ag_ui_client__WEBPACK_IMPORTED_MODULE_1__.AbstractAgent {\n  agent;\n  resourceId;\n  constructor({ agent, agentId, resourceId, ...rest }) {\n    super({\n      agentId,\n      ...rest\n    });\n    this.agent = agent;\n    this.resourceId = resourceId;\n  }\n  run(input) {\n    return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((subscriber) => {\n      const convertedMessages = convertMessagesToMastraMessages(input.messages);\n      subscriber.next({\n        type: _ag_ui_client__WEBPACK_IMPORTED_MODULE_3__.EventType.RUN_STARTED,\n        threadId: input.threadId,\n        runId: input.runId\n      });\n      this.agent.stream({\n        threadId: input.threadId,\n        resourceId: this.resourceId ?? \"\",\n        runId: input.runId,\n        messages: convertedMessages,\n        clientTools: input.tools.reduce(\n          (acc, tool) => {\n            acc[tool.name] = {\n              id: tool.name,\n              description: tool.description,\n              inputSchema: tool.parameters\n            };\n            return acc;\n          },\n          {}\n        )\n      }).then((response) => {\n        let currentMessageId = void 0;\n        let isInTextMessage = false;\n        return response.processDataStream({\n          onTextPart: (text) => {\n            if (currentMessageId === void 0) {\n              currentMessageId = generateUUID();\n              const message2 = {\n                type: _ag_ui_client__WEBPACK_IMPORTED_MODULE_3__.EventType.TEXT_MESSAGE_START,\n                messageId: currentMessageId,\n                role: \"assistant\"\n              };\n              subscriber.next(message2);\n              isInTextMessage = true;\n            }\n            const message = {\n              type: _ag_ui_client__WEBPACK_IMPORTED_MODULE_3__.EventType.TEXT_MESSAGE_CONTENT,\n              messageId: currentMessageId,\n              delta: text\n            };\n            subscriber.next(message);\n          },\n          onFinishMessagePart: () => {\n            if (currentMessageId !== void 0) {\n              const message = {\n                type: _ag_ui_client__WEBPACK_IMPORTED_MODULE_3__.EventType.TEXT_MESSAGE_END,\n                messageId: currentMessageId\n              };\n              subscriber.next(message);\n              isInTextMessage = false;\n            }\n            subscriber.next({\n              type: _ag_ui_client__WEBPACK_IMPORTED_MODULE_3__.EventType.RUN_FINISHED,\n              threadId: input.threadId,\n              runId: input.runId\n            });\n            subscriber.complete();\n          },\n          onToolCallPart(streamPart) {\n            const parentMessageId = currentMessageId || generateUUID();\n            if (isInTextMessage) {\n              const message = {\n                type: _ag_ui_client__WEBPACK_IMPORTED_MODULE_3__.EventType.TEXT_MESSAGE_END,\n                messageId: parentMessageId\n              };\n              subscriber.next(message);\n              isInTextMessage = false;\n            }\n            subscriber.next({\n              type: _ag_ui_client__WEBPACK_IMPORTED_MODULE_3__.EventType.TOOL_CALL_START,\n              toolCallId: streamPart.toolCallId,\n              toolCallName: streamPart.toolName,\n              parentMessageId\n            });\n            subscriber.next({\n              type: _ag_ui_client__WEBPACK_IMPORTED_MODULE_3__.EventType.TOOL_CALL_ARGS,\n              toolCallId: streamPart.toolCallId,\n              delta: JSON.stringify(streamPart.args),\n              parentMessageId\n            });\n            subscriber.next({\n              type: _ag_ui_client__WEBPACK_IMPORTED_MODULE_3__.EventType.TOOL_CALL_END,\n              toolCallId: streamPart.toolCallId,\n              parentMessageId\n            });\n          }\n        });\n      }).catch((error) => {\n        console.error(\"error\", error);\n        subscriber.error(error);\n      });\n      return () => {\n      };\n    });\n  }\n};\nfunction generateUUID() {\n  if (typeof crypto !== \"undefined\") {\n    if (typeof crypto.randomUUID === \"function\") {\n      return crypto.randomUUID();\n    }\n    if (typeof crypto.getRandomValues === \"function\") {\n      const buffer = new Uint8Array(16);\n      crypto.getRandomValues(buffer);\n      buffer[6] = buffer[6] & 15 | 64;\n      buffer[8] = buffer[8] & 63 | 128;\n      let hex = \"\";\n      for (let i = 0; i < 16; i++) {\n        hex += buffer[i].toString(16).padStart(2, \"0\");\n        if (i === 3 || i === 5 || i === 7 || i === 9) hex += \"-\";\n      }\n      return hex;\n    }\n  }\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    const r = Math.random() * 16 | 0;\n    const v = c === \"x\" ? r : r & 3 | 8;\n    return v.toString(16);\n  });\n}\nfunction convertMessagesToMastraMessages(messages) {\n  const result = [];\n  for (const message of messages) {\n    if (message.role === \"assistant\") {\n      const parts = message.content ? [{ type: \"text\", text: message.content }] : [];\n      for (const toolCall of message.toolCalls ?? []) {\n        parts.push({\n          type: \"tool-call\",\n          toolCallId: toolCall.id,\n          toolName: toolCall.function.name,\n          args: JSON.parse(toolCall.function.arguments)\n        });\n      }\n      result.push({\n        role: \"assistant\",\n        content: parts\n      });\n      if (message.toolCalls?.length) {\n        result.push({\n          role: \"tool\",\n          content: message.toolCalls.map((toolCall) => ({\n            type: \"tool-result\",\n            toolCallId: toolCall.id,\n            toolName: toolCall.function.name,\n            result: JSON.parse(toolCall.function.arguments)\n          }))\n        });\n      }\n    } else if (message.role === \"user\") {\n      result.push({\n        role: \"user\",\n        content: message.content || \"\"\n      });\n    } else if (message.role === \"tool\") {\n      result.push({\n        role: \"tool\",\n        content: [\n          {\n            type: \"tool-result\",\n            toolCallId: message.toolCallId,\n            toolName: \"unknown\",\n            result: message.content\n          }\n        ]\n      });\n    }\n  }\n  return result;\n}\nfunction zodToJsonSchema(zodSchema) {\n  if (!(zodSchema instanceof zod__WEBPACK_IMPORTED_MODULE_4__.ZodSchema)) {\n    return zodSchema;\n  }\n  return (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(zodSchema, { $refStrategy: \"none\" });\n}\n\n// src/resources/base.ts\nvar BaseResource = class {\n  options;\n  constructor(options) {\n    this.options = options;\n  }\n  /**\n   * Makes an HTTP request to the API with retries and exponential backoff\n   * @param path - The API endpoint path\n   * @param options - Optional request configuration\n   * @returns Promise containing the response data\n   */\n  async request(path, options = {}) {\n    let lastError = null;\n    const { baseUrl, retries = 3, backoffMs = 100, maxBackoffMs = 1e3, headers = {} } = this.options;\n    let delay = backoffMs;\n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        const response = await fetch(`${baseUrl.replace(/\\/$/, \"\")}${path}`, {\n          ...options,\n          headers: {\n            ...headers,\n            ...options.headers\n            // TODO: Bring this back once we figure out what we/users need to do to make this work with cross-origin requests\n            // 'x-mastra-client-type': 'js',\n          },\n          body: options.body instanceof FormData ? options.body : options.body ? JSON.stringify(options.body) : void 0\n        });\n        if (!response.ok) {\n          const errorBody = await response.text();\n          let errorMessage = `HTTP error! status: ${response.status}`;\n          try {\n            const errorJson = JSON.parse(errorBody);\n            errorMessage += ` - ${JSON.stringify(errorJson)}`;\n          } catch {\n            if (errorBody) {\n              errorMessage += ` - ${errorBody}`;\n            }\n          }\n          throw new Error(errorMessage);\n        }\n        if (options.stream) {\n          return response;\n        }\n        const data = await response.json();\n        return data;\n      } catch (error) {\n        lastError = error;\n        if (attempt === retries) {\n          break;\n        }\n        await new Promise((resolve) => setTimeout(resolve, delay));\n        delay = Math.min(delay * 2, maxBackoffMs);\n      }\n    }\n    throw lastError || new Error(\"Request failed\");\n  }\n};\nfunction parseClientRuntimeContext(runtimeContext) {\n  if (runtimeContext) {\n    if (runtimeContext instanceof _mastra_core_runtime_context__WEBPACK_IMPORTED_MODULE_5__.RuntimeContext) {\n      return Object.fromEntries(runtimeContext.entries());\n    }\n    return runtimeContext;\n  }\n  return void 0;\n}\n\n// src/resources/agent.ts\nvar AgentVoice = class extends BaseResource {\n  constructor(options, agentId) {\n    super(options);\n    this.agentId = agentId;\n    this.agentId = agentId;\n  }\n  /**\n   * Convert text to speech using the agent's voice provider\n   * @param text - Text to convert to speech\n   * @param options - Optional provider-specific options for speech generation\n   * @returns Promise containing the audio data\n   */\n  async speak(text, options) {\n    return this.request(`/api/agents/${this.agentId}/voice/speak`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: { input: text, options },\n      stream: true\n    });\n  }\n  /**\n   * Convert speech to text using the agent's voice provider\n   * @param audio - Audio data to transcribe\n   * @param options - Optional provider-specific options\n   * @returns Promise containing the transcribed text\n   */\n  listen(audio, options) {\n    const formData = new FormData();\n    formData.append(\"audio\", audio);\n    if (options) {\n      formData.append(\"options\", JSON.stringify(options));\n    }\n    return this.request(`/api/agents/${this.agentId}/voice/listen`, {\n      method: \"POST\",\n      body: formData\n    });\n  }\n  /**\n   * Get available speakers for the agent's voice provider\n   * @returns Promise containing list of available speakers\n   */\n  getSpeakers() {\n    return this.request(`/api/agents/${this.agentId}/voice/speakers`);\n  }\n};\nvar Agent = class extends BaseResource {\n  constructor(options, agentId) {\n    super(options);\n    this.agentId = agentId;\n    this.voice = new AgentVoice(options, this.agentId);\n  }\n  voice;\n  /**\n   * Retrieves details about the agent\n   * @returns Promise containing agent details including model and instructions\n   */\n  details() {\n    return this.request(`/api/agents/${this.agentId}`);\n  }\n  /**\n   * Generates a response from the agent\n   * @param params - Generation parameters including prompt\n   * @returns Promise containing the generated response\n   */\n  generate(params) {\n    const processedParams = {\n      ...params,\n      output: params.output ? zodToJsonSchema(params.output) : void 0,\n      experimental_output: params.experimental_output ? zodToJsonSchema(params.experimental_output) : void 0,\n      runtimeContext: parseClientRuntimeContext(params.runtimeContext)\n    };\n    return this.request(`/api/agents/${this.agentId}/generate`, {\n      method: \"POST\",\n      body: processedParams\n    });\n  }\n  /**\n   * Streams a response from the agent\n   * @param params - Stream parameters including prompt\n   * @returns Promise containing the enhanced Response object with processDataStream method\n   */\n  async stream(params) {\n    const processedParams = {\n      ...params,\n      output: params.output ? zodToJsonSchema(params.output) : void 0,\n      experimental_output: params.experimental_output ? zodToJsonSchema(params.experimental_output) : void 0,\n      runtimeContext: parseClientRuntimeContext(params.runtimeContext)\n    };\n    const response = await this.request(`/api/agents/${this.agentId}/stream`, {\n      method: \"POST\",\n      body: processedParams,\n      stream: true\n    });\n    if (!response.body) {\n      throw new Error(\"No response body\");\n    }\n    response.processDataStream = async (options = {}) => {\n      await (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_6__.processDataStream)({\n        stream: response.body,\n        ...options\n      });\n    };\n    return response;\n  }\n  /**\n   * Gets details about a specific tool available to the agent\n   * @param toolId - ID of the tool to retrieve\n   * @returns Promise containing tool details\n   */\n  getTool(toolId) {\n    return this.request(`/api/agents/${this.agentId}/tools/${toolId}`);\n  }\n  /**\n   * Executes a tool for the agent\n   * @param toolId - ID of the tool to execute\n   * @param params - Parameters required for tool execution\n   * @returns Promise containing the tool execution results\n   */\n  executeTool(toolId, params) {\n    const body = {\n      data: params.data,\n      runtimeContext: params.runtimeContext ? Object.fromEntries(params.runtimeContext.entries()) : void 0\n    };\n    return this.request(`/api/agents/${this.agentId}/tools/${toolId}/execute`, {\n      method: \"POST\",\n      body\n    });\n  }\n  /**\n   * Retrieves evaluation results for the agent\n   * @returns Promise containing agent evaluations\n   */\n  evals() {\n    return this.request(`/api/agents/${this.agentId}/evals/ci`);\n  }\n  /**\n   * Retrieves live evaluation results for the agent\n   * @returns Promise containing live agent evaluations\n   */\n  liveEvals() {\n    return this.request(`/api/agents/${this.agentId}/evals/live`);\n  }\n};\nvar Network = class extends BaseResource {\n  constructor(options, networkId) {\n    super(options);\n    this.networkId = networkId;\n  }\n  /**\n   * Retrieves details about the network\n   * @returns Promise containing network details\n   */\n  details() {\n    return this.request(`/api/networks/${this.networkId}`);\n  }\n  /**\n   * Generates a response from the agent\n   * @param params - Generation parameters including prompt\n   * @returns Promise containing the generated response\n   */\n  generate(params) {\n    const processedParams = {\n      ...params,\n      output: zodToJsonSchema(params.output),\n      experimental_output: zodToJsonSchema(params.experimental_output)\n    };\n    return this.request(`/api/networks/${this.networkId}/generate`, {\n      method: \"POST\",\n      body: processedParams\n    });\n  }\n  /**\n   * Streams a response from the agent\n   * @param params - Stream parameters including prompt\n   * @returns Promise containing the enhanced Response object with processDataStream method\n   */\n  async stream(params) {\n    const processedParams = {\n      ...params,\n      output: zodToJsonSchema(params.output),\n      experimental_output: zodToJsonSchema(params.experimental_output)\n    };\n    const response = await this.request(`/api/networks/${this.networkId}/stream`, {\n      method: \"POST\",\n      body: processedParams,\n      stream: true\n    });\n    if (!response.body) {\n      throw new Error(\"No response body\");\n    }\n    response.processDataStream = async (options = {}) => {\n      await (0,_ai_sdk_ui_utils__WEBPACK_IMPORTED_MODULE_6__.processDataStream)({\n        stream: response.body,\n        ...options\n      });\n    };\n    return response;\n  }\n};\n\n// src/resources/memory-thread.ts\nvar MemoryThread = class extends BaseResource {\n  constructor(options, threadId, agentId) {\n    super(options);\n    this.threadId = threadId;\n    this.agentId = agentId;\n  }\n  /**\n   * Retrieves the memory thread details\n   * @returns Promise containing thread details including title and metadata\n   */\n  get() {\n    return this.request(`/api/memory/threads/${this.threadId}?agentId=${this.agentId}`);\n  }\n  /**\n   * Updates the memory thread properties\n   * @param params - Update parameters including title and metadata\n   * @returns Promise containing updated thread details\n   */\n  update(params) {\n    return this.request(`/api/memory/threads/${this.threadId}?agentId=${this.agentId}`, {\n      method: \"PATCH\",\n      body: params\n    });\n  }\n  /**\n   * Deletes the memory thread\n   * @returns Promise containing deletion result\n   */\n  delete() {\n    return this.request(`/api/memory/threads/${this.threadId}?agentId=${this.agentId}`, {\n      method: \"DELETE\"\n    });\n  }\n  /**\n   * Retrieves messages associated with the thread\n   * @param params - Optional parameters including limit for number of messages to retrieve\n   * @returns Promise containing thread messages and UI messages\n   */\n  getMessages(params) {\n    const query = new URLSearchParams({\n      agentId: this.agentId,\n      ...params?.limit ? { limit: params.limit.toString() } : {}\n    });\n    return this.request(`/api/memory/threads/${this.threadId}/messages?${query.toString()}`);\n  }\n};\n\n// src/resources/vector.ts\nvar Vector = class extends BaseResource {\n  constructor(options, vectorName) {\n    super(options);\n    this.vectorName = vectorName;\n  }\n  /**\n   * Retrieves details about a specific vector index\n   * @param indexName - Name of the index to get details for\n   * @returns Promise containing vector index details\n   */\n  details(indexName) {\n    return this.request(`/api/vector/${this.vectorName}/indexes/${indexName}`);\n  }\n  /**\n   * Deletes a vector index\n   * @param indexName - Name of the index to delete\n   * @returns Promise indicating deletion success\n   */\n  delete(indexName) {\n    return this.request(`/api/vector/${this.vectorName}/indexes/${indexName}`, {\n      method: \"DELETE\"\n    });\n  }\n  /**\n   * Retrieves a list of all available indexes\n   * @returns Promise containing array of index names\n   */\n  getIndexes() {\n    return this.request(`/api/vector/${this.vectorName}/indexes`);\n  }\n  /**\n   * Creates a new vector index\n   * @param params - Parameters for index creation including dimension and metric\n   * @returns Promise indicating creation success\n   */\n  createIndex(params) {\n    return this.request(`/api/vector/${this.vectorName}/create-index`, {\n      method: \"POST\",\n      body: params\n    });\n  }\n  /**\n   * Upserts vectors into an index\n   * @param params - Parameters containing vectors, metadata, and optional IDs\n   * @returns Promise containing array of vector IDs\n   */\n  upsert(params) {\n    return this.request(`/api/vector/${this.vectorName}/upsert`, {\n      method: \"POST\",\n      body: params\n    });\n  }\n  /**\n   * Queries vectors in an index\n   * @param params - Query parameters including query vector and search options\n   * @returns Promise containing query results\n   */\n  query(params) {\n    return this.request(`/api/vector/${this.vectorName}/query`, {\n      method: \"POST\",\n      body: params\n    });\n  }\n};\n\n// src/resources/legacy-workflow.ts\nvar RECORD_SEPARATOR = \"\u001e\";\nvar LegacyWorkflow = class extends BaseResource {\n  constructor(options, workflowId) {\n    super(options);\n    this.workflowId = workflowId;\n  }\n  /**\n   * Retrieves details about the legacy workflow\n   * @returns Promise containing legacy workflow details including steps and graphs\n   */\n  details() {\n    return this.request(`/api/workflows/legacy/${this.workflowId}`);\n  }\n  /**\n   * Retrieves all runs for a legacy workflow\n   * @param params - Parameters for filtering runs\n   * @returns Promise containing legacy workflow runs array\n   */\n  runs(params) {\n    const searchParams = new URLSearchParams();\n    if (params?.fromDate) {\n      searchParams.set(\"fromDate\", params.fromDate.toISOString());\n    }\n    if (params?.toDate) {\n      searchParams.set(\"toDate\", params.toDate.toISOString());\n    }\n    if (params?.limit) {\n      searchParams.set(\"limit\", String(params.limit));\n    }\n    if (params?.offset) {\n      searchParams.set(\"offset\", String(params.offset));\n    }\n    if (params?.resourceId) {\n      searchParams.set(\"resourceId\", params.resourceId);\n    }\n    if (searchParams.size) {\n      return this.request(`/api/workflows/legacy/${this.workflowId}/runs?${searchParams}`);\n    } else {\n      return this.request(`/api/workflows/legacy/${this.workflowId}/runs`);\n    }\n  }\n  /**\n   * Creates a new legacy workflow run\n   * @returns Promise containing the generated run ID\n   */\n  createRun(params) {\n    const searchParams = new URLSearchParams();\n    if (!!params?.runId) {\n      searchParams.set(\"runId\", params.runId);\n    }\n    return this.request(`/api/workflows/legacy/${this.workflowId}/create-run?${searchParams.toString()}`, {\n      method: \"POST\"\n    });\n  }\n  /**\n   * Starts a legacy workflow run synchronously without waiting for the workflow to complete\n   * @param params - Object containing the runId and triggerData\n   * @returns Promise containing success message\n   */\n  start(params) {\n    return this.request(`/api/workflows/legacy/${this.workflowId}/start?runId=${params.runId}`, {\n      method: \"POST\",\n      body: params?.triggerData\n    });\n  }\n  /**\n   * Resumes a suspended legacy workflow step synchronously without waiting for the workflow to complete\n   * @param stepId - ID of the step to resume\n   * @param runId - ID of the legacy workflow run\n   * @param context - Context to resume the legacy workflow with\n   * @returns Promise containing the legacy workflow resume results\n   */\n  resume({\n    stepId,\n    runId,\n    context\n  }) {\n    return this.request(`/api/workflows/legacy/${this.workflowId}/resume?runId=${runId}`, {\n      method: \"POST\",\n      body: {\n        stepId,\n        context\n      }\n    });\n  }\n  /**\n   * Starts a workflow run asynchronously and returns a promise that resolves when the workflow is complete\n   * @param params - Object containing the optional runId and triggerData\n   * @returns Promise containing the workflow execution results\n   */\n  startAsync(params) {\n    const searchParams = new URLSearchParams();\n    if (!!params?.runId) {\n      searchParams.set(\"runId\", params.runId);\n    }\n    return this.request(`/api/workflows/legacy/${this.workflowId}/start-async?${searchParams.toString()}`, {\n      method: \"POST\",\n      body: params?.triggerData\n    });\n  }\n  /**\n   * Resumes a suspended legacy workflow step asynchronously and returns a promise that resolves when the workflow is complete\n   * @param params - Object containing the runId, stepId, and context\n   * @returns Promise containing the workflow resume results\n   */\n  resumeAsync(params) {\n    return this.request(`/api/workflows/legacy/${this.workflowId}/resume-async?runId=${params.runId}`, {\n      method: \"POST\",\n      body: {\n        stepId: params.stepId,\n        context: params.context\n      }\n    });\n  }\n  /**\n   * Creates an async generator that processes a readable stream and yields records\n   * separated by the Record Separator character (\\x1E)\n   *\n   * @param stream - The readable stream to process\n   * @returns An async generator that yields parsed records\n   */\n  async *streamProcessor(stream) {\n    const reader = stream.getReader();\n    let doneReading = false;\n    let buffer = \"\";\n    try {\n      while (!doneReading) {\n        const { done, value } = await reader.read();\n        doneReading = done;\n        if (done && !value) continue;\n        try {\n          const decoded = value ? new TextDecoder().decode(value) : \"\";\n          const chunks = (buffer + decoded).split(RECORD_SEPARATOR);\n          buffer = chunks.pop() || \"\";\n          for (const chunk of chunks) {\n            if (chunk) {\n              if (typeof chunk === \"string\") {\n                try {\n                  const parsedChunk = JSON.parse(chunk);\n                  yield parsedChunk;\n                } catch {\n                }\n              }\n            }\n          }\n        } catch {\n        }\n      }\n      if (buffer) {\n        try {\n          yield JSON.parse(buffer);\n        } catch {\n        }\n      }\n    } finally {\n      reader.cancel().catch(() => {\n      });\n    }\n  }\n  /**\n   * Watches legacy workflow transitions in real-time\n   * @param runId - Optional run ID to filter the watch stream\n   * @returns AsyncGenerator that yields parsed records from the legacy workflow watch stream\n   */\n  async watch({ runId }, onRecord) {\n    const response = await this.request(`/api/workflows/legacy/${this.workflowId}/watch?runId=${runId}`, {\n      stream: true\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to watch legacy workflow: ${response.statusText}`);\n    }\n    if (!response.body) {\n      throw new Error(\"Response body is null\");\n    }\n    for await (const record of this.streamProcessor(response.body)) {\n      onRecord(record);\n    }\n  }\n};\n\n// src/resources/tool.ts\nvar Tool = class extends BaseResource {\n  constructor(options, toolId) {\n    super(options);\n    this.toolId = toolId;\n  }\n  /**\n   * Retrieves details about the tool\n   * @returns Promise containing tool details including description and schemas\n   */\n  details() {\n    return this.request(`/api/tools/${this.toolId}`);\n  }\n  /**\n   * Executes the tool with the provided parameters\n   * @param params - Parameters required for tool execution\n   * @returns Promise containing the tool execution results\n   */\n  execute(params) {\n    const url = new URLSearchParams();\n    if (params.runId) {\n      url.set(\"runId\", params.runId);\n    }\n    const body = {\n      data: params.data,\n      runtimeContext: parseClientRuntimeContext(params.runtimeContext)\n    };\n    return this.request(`/api/tools/${this.toolId}/execute?${url.toString()}`, {\n      method: \"POST\",\n      body\n    });\n  }\n};\n\n// src/resources/workflow.ts\nvar RECORD_SEPARATOR2 = \"\u001e\";\nvar Workflow = class extends BaseResource {\n  constructor(options, workflowId) {\n    super(options);\n    this.workflowId = workflowId;\n  }\n  /**\n   * Creates an async generator that processes a readable stream and yields workflow records\n   * separated by the Record Separator character (\\x1E)\n   *\n   * @param stream - The readable stream to process\n   * @returns An async generator that yields parsed records\n   */\n  async *streamProcessor(stream) {\n    const reader = stream.getReader();\n    let doneReading = false;\n    let buffer = \"\";\n    try {\n      while (!doneReading) {\n        const { done, value } = await reader.read();\n        doneReading = done;\n        if (done && !value) continue;\n        try {\n          const decoded = value ? new TextDecoder().decode(value) : \"\";\n          const chunks = (buffer + decoded).split(RECORD_SEPARATOR2);\n          buffer = chunks.pop() || \"\";\n          for (const chunk of chunks) {\n            if (chunk) {\n              if (typeof chunk === \"string\") {\n                try {\n                  const parsedChunk = JSON.parse(chunk);\n                  yield parsedChunk;\n                } catch {\n                }\n              }\n            }\n          }\n        } catch {\n        }\n      }\n      if (buffer) {\n        try {\n          yield JSON.parse(buffer);\n        } catch {\n        }\n      }\n    } finally {\n      reader.cancel().catch(() => {\n      });\n    }\n  }\n  /**\n   * Retrieves details about the workflow\n   * @returns Promise containing workflow details including steps and graphs\n   */\n  details() {\n    return this.request(`/api/workflows/${this.workflowId}`);\n  }\n  /**\n   * Retrieves all runs for a workflow\n   * @param params - Parameters for filtering runs\n   * @returns Promise containing workflow runs array\n   */\n  runs(params) {\n    const searchParams = new URLSearchParams();\n    if (params?.fromDate) {\n      searchParams.set(\"fromDate\", params.fromDate.toISOString());\n    }\n    if (params?.toDate) {\n      searchParams.set(\"toDate\", params.toDate.toISOString());\n    }\n    if (params?.limit) {\n      searchParams.set(\"limit\", String(params.limit));\n    }\n    if (params?.offset) {\n      searchParams.set(\"offset\", String(params.offset));\n    }\n    if (params?.resourceId) {\n      searchParams.set(\"resourceId\", params.resourceId);\n    }\n    if (searchParams.size) {\n      return this.request(`/api/workflows/${this.workflowId}/runs?${searchParams}`);\n    } else {\n      return this.request(`/api/workflows/${this.workflowId}/runs`);\n    }\n  }\n  /**\n   * Creates a new workflow run\n   * @param params - Optional object containing the optional runId\n   * @returns Promise containing the runId of the created run\n   */\n  createRun(params) {\n    const searchParams = new URLSearchParams();\n    if (!!params?.runId) {\n      searchParams.set(\"runId\", params.runId);\n    }\n    return this.request(`/api/workflows/${this.workflowId}/create-run?${searchParams.toString()}`, {\n      method: \"POST\"\n    });\n  }\n  /**\n   * Starts a workflow run synchronously without waiting for the workflow to complete\n   * @param params - Object containing the runId, inputData and runtimeContext\n   * @returns Promise containing success message\n   */\n  start(params) {\n    const runtimeContext = parseClientRuntimeContext(params.runtimeContext);\n    return this.request(`/api/workflows/${this.workflowId}/start?runId=${params.runId}`, {\n      method: \"POST\",\n      body: { inputData: params?.inputData, runtimeContext }\n    });\n  }\n  /**\n   * Resumes a suspended workflow step synchronously without waiting for the workflow to complete\n   * @param params - Object containing the runId, step, resumeData and runtimeContext\n   * @returns Promise containing success message\n   */\n  resume({\n    step,\n    runId,\n    resumeData,\n    ...rest\n  }) {\n    const runtimeContext = parseClientRuntimeContext(rest.runtimeContext);\n    return this.request(`/api/workflows/${this.workflowId}/resume?runId=${runId}`, {\n      method: \"POST\",\n      stream: true,\n      body: {\n        step,\n        resumeData,\n        runtimeContext\n      }\n    });\n  }\n  /**\n   * Starts a workflow run asynchronously and returns a promise that resolves when the workflow is complete\n   * @param params - Object containing the optional runId, inputData and runtimeContext\n   * @returns Promise containing the workflow execution results\n   */\n  startAsync(params) {\n    const searchParams = new URLSearchParams();\n    if (!!params?.runId) {\n      searchParams.set(\"runId\", params.runId);\n    }\n    const runtimeContext = parseClientRuntimeContext(params.runtimeContext);\n    return this.request(`/api/workflows/${this.workflowId}/start-async?${searchParams.toString()}`, {\n      method: \"POST\",\n      body: { inputData: params.inputData, runtimeContext }\n    });\n  }\n  /**\n   * Resumes a suspended workflow step asynchronously and returns a promise that resolves when the workflow is complete\n   * @param params - Object containing the runId, step, resumeData and runtimeContext\n   * @returns Promise containing the workflow resume results\n   */\n  resumeAsync(params) {\n    const runtimeContext = parseClientRuntimeContext(params.runtimeContext);\n    return this.request(`/api/workflows/${this.workflowId}/resume-async?runId=${params.runId}`, {\n      method: \"POST\",\n      body: {\n        step: params.step,\n        resumeData: params.resumeData,\n        runtimeContext\n      }\n    });\n  }\n  /**\n   * Watches workflow transitions in real-time\n   * @param runId - Optional run ID to filter the watch stream\n   * @returns AsyncGenerator that yields parsed records from the workflow watch stream\n   */\n  async watch({ runId }, onRecord) {\n    const response = await this.request(`/api/workflows/${this.workflowId}/watch?runId=${runId}`, {\n      stream: true\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to watch workflow: ${response.statusText}`);\n    }\n    if (!response.body) {\n      throw new Error(\"Response body is null\");\n    }\n    for await (const record of this.streamProcessor(response.body)) {\n      onRecord(record);\n    }\n  }\n};\n\n// src/resources/a2a.ts\nvar A2A = class extends BaseResource {\n  constructor(options, agentId) {\n    super(options);\n    this.agentId = agentId;\n  }\n  /**\n   * Get the agent card with metadata about the agent\n   * @returns Promise containing the agent card information\n   */\n  async getCard() {\n    return this.request(`/.well-known/${this.agentId}/agent.json`);\n  }\n  /**\n   * Send a message to the agent and get a response\n   * @param params - Parameters for the task\n   * @returns Promise containing the task response\n   */\n  async sendMessage(params) {\n    const response = await this.request(`/a2a/${this.agentId}`, {\n      method: \"POST\",\n      body: {\n        method: \"tasks/send\",\n        params\n      }\n    });\n    return { task: response.result };\n  }\n  /**\n   * Get the status and result of a task\n   * @param params - Parameters for querying the task\n   * @returns Promise containing the task response\n   */\n  async getTask(params) {\n    const response = await this.request(`/a2a/${this.agentId}`, {\n      method: \"POST\",\n      body: {\n        method: \"tasks/get\",\n        params\n      }\n    });\n    return response.result;\n  }\n  /**\n   * Cancel a running task\n   * @param params - Parameters identifying the task to cancel\n   * @returns Promise containing the task response\n   */\n  async cancelTask(params) {\n    return this.request(`/a2a/${this.agentId}`, {\n      method: \"POST\",\n      body: {\n        method: \"tasks/cancel\",\n        params\n      }\n    });\n  }\n  /**\n   * Send a message and subscribe to streaming updates (not fully implemented)\n   * @param params - Parameters for the task\n   * @returns Promise containing the task response\n   */\n  async sendAndSubscribe(params) {\n    return this.request(`/a2a/${this.agentId}`, {\n      method: \"POST\",\n      body: {\n        method: \"tasks/sendSubscribe\",\n        params\n      },\n      stream: true\n    });\n  }\n};\n\n// src/resources/mcp-tool.ts\nvar MCPTool = class extends BaseResource {\n  serverId;\n  toolId;\n  constructor(options, serverId, toolId) {\n    super(options);\n    this.serverId = serverId;\n    this.toolId = toolId;\n  }\n  /**\n   * Retrieves details about this specific tool from the MCP server.\n   * @returns Promise containing the tool's information (name, description, schema).\n   */\n  details() {\n    return this.request(`/api/mcp/${this.serverId}/tools/${this.toolId}`);\n  }\n  /**\n   * Executes this specific tool on the MCP server.\n   * @param params - Parameters for tool execution, including data/args and optional runtimeContext.\n   * @returns Promise containing the result of the tool execution.\n   */\n  execute(params) {\n    const body = {};\n    if (params.data !== void 0) body.data = params.data;\n    if (params.runtimeContext !== void 0) {\n      body.runtimeContext = params.runtimeContext;\n    }\n    return this.request(`/api/mcp/${this.serverId}/tools/${this.toolId}/execute`, {\n      method: \"POST\",\n      body: Object.keys(body).length > 0 ? body : void 0\n    });\n  }\n};\n\n// src/client.ts\nvar MastraClient = class extends BaseResource {\n  constructor(options) {\n    super(options);\n  }\n  /**\n   * Retrieves all available agents\n   * @returns Promise containing map of agent IDs to agent details\n   */\n  getAgents() {\n    return this.request(\"/api/agents\");\n  }\n  async getAGUI({ resourceId }) {\n    const agents = await this.getAgents();\n    return Object.entries(agents).reduce(\n      (acc, [agentId]) => {\n        const agent = this.getAgent(agentId);\n        acc[agentId] = new AGUIAdapter({\n          agentId,\n          agent,\n          resourceId\n        });\n        return acc;\n      },\n      {}\n    );\n  }\n  /**\n   * Gets an agent instance by ID\n   * @param agentId - ID of the agent to retrieve\n   * @returns Agent instance\n   */\n  getAgent(agentId) {\n    return new Agent(this.options, agentId);\n  }\n  /**\n   * Retrieves memory threads for a resource\n   * @param params - Parameters containing the resource ID\n   * @returns Promise containing array of memory threads\n   */\n  getMemoryThreads(params) {\n    return this.request(`/api/memory/threads?resourceid=${params.resourceId}&agentId=${params.agentId}`);\n  }\n  /**\n   * Creates a new memory thread\n   * @param params - Parameters for creating the memory thread\n   * @returns Promise containing the created memory thread\n   */\n  createMemoryThread(params) {\n    return this.request(`/api/memory/threads?agentId=${params.agentId}`, { method: \"POST\", body: params });\n  }\n  /**\n   * Gets a memory thread instance by ID\n   * @param threadId - ID of the memory thread to retrieve\n   * @returns MemoryThread instance\n   */\n  getMemoryThread(threadId, agentId) {\n    return new MemoryThread(this.options, threadId, agentId);\n  }\n  /**\n   * Saves messages to memory\n   * @param params - Parameters containing messages to save\n   * @returns Promise containing the saved messages\n   */\n  saveMessageToMemory(params) {\n    return this.request(`/api/memory/save-messages?agentId=${params.agentId}`, {\n      method: \"POST\",\n      body: params\n    });\n  }\n  /**\n   * Gets the status of the memory system\n   * @returns Promise containing memory system status\n   */\n  getMemoryStatus(agentId) {\n    return this.request(`/api/memory/status?agentId=${agentId}`);\n  }\n  /**\n   * Retrieves all available tools\n   * @returns Promise containing map of tool IDs to tool details\n   */\n  getTools() {\n    return this.request(\"/api/tools\");\n  }\n  /**\n   * Gets a tool instance by ID\n   * @param toolId - ID of the tool to retrieve\n   * @returns Tool instance\n   */\n  getTool(toolId) {\n    return new Tool(this.options, toolId);\n  }\n  /**\n   * Retrieves all available legacy workflows\n   * @returns Promise containing map of legacy workflow IDs to legacy workflow details\n   */\n  getLegacyWorkflows() {\n    return this.request(\"/api/workflows/legacy\");\n  }\n  /**\n   * Gets a legacy workflow instance by ID\n   * @param workflowId - ID of the legacy workflow to retrieve\n   * @returns Legacy Workflow instance\n   */\n  getLegacyWorkflow(workflowId) {\n    return new LegacyWorkflow(this.options, workflowId);\n  }\n  /**\n   * Retrieves all available workflows\n   * @returns Promise containing map of workflow IDs to workflow details\n   */\n  getWorkflows() {\n    return this.request(\"/api/workflows\");\n  }\n  /**\n   * Gets a workflow instance by ID\n   * @param workflowId - ID of the workflow to retrieve\n   * @returns Workflow instance\n   */\n  getWorkflow(workflowId) {\n    return new Workflow(this.options, workflowId);\n  }\n  /**\n   * Gets a vector instance by name\n   * @param vectorName - Name of the vector to retrieve\n   * @returns Vector instance\n   */\n  getVector(vectorName) {\n    return new Vector(this.options, vectorName);\n  }\n  /**\n   * Retrieves logs\n   * @param params - Parameters for filtering logs\n   * @returns Promise containing array of log messages\n   */\n  getLogs(params) {\n    return this.request(`/api/logs?transportId=${params.transportId}`);\n  }\n  /**\n   * Gets logs for a specific run\n   * @param params - Parameters containing run ID to retrieve\n   * @returns Promise containing array of log messages\n   */\n  getLogForRun(params) {\n    return this.request(`/api/logs/${params.runId}?transportId=${params.transportId}`);\n  }\n  /**\n   * List of all log transports\n   * @returns Promise containing list of log transports\n   */\n  getLogTransports() {\n    return this.request(\"/api/logs/transports\");\n  }\n  /**\n   * List of all traces (paged)\n   * @param params - Parameters for filtering traces\n   * @returns Promise containing telemetry data\n   */\n  getTelemetry(params) {\n    const { name, scope, page, perPage, attribute, fromDate, toDate } = params || {};\n    const _attribute = attribute ? Object.entries(attribute).map(([key, value]) => `${key}:${value}`) : [];\n    const searchParams = new URLSearchParams();\n    if (name) {\n      searchParams.set(\"name\", name);\n    }\n    if (scope) {\n      searchParams.set(\"scope\", scope);\n    }\n    if (page) {\n      searchParams.set(\"page\", String(page));\n    }\n    if (perPage) {\n      searchParams.set(\"perPage\", String(perPage));\n    }\n    if (_attribute) {\n      if (Array.isArray(_attribute)) {\n        for (const attr of _attribute) {\n          searchParams.append(\"attribute\", attr);\n        }\n      } else {\n        searchParams.set(\"attribute\", _attribute);\n      }\n    }\n    if (fromDate) {\n      searchParams.set(\"fromDate\", fromDate.toISOString());\n    }\n    if (toDate) {\n      searchParams.set(\"toDate\", toDate.toISOString());\n    }\n    if (searchParams.size) {\n      return this.request(`/api/telemetry?${searchParams}`);\n    } else {\n      return this.request(`/api/telemetry`);\n    }\n  }\n  /**\n   * Retrieves all available networks\n   * @returns Promise containing map of network IDs to network details\n   */\n  getNetworks() {\n    return this.request(\"/api/networks\");\n  }\n  /**\n   * Gets a network instance by ID\n   * @param networkId - ID of the network to retrieve\n   * @returns Network instance\n   */\n  getNetwork(networkId) {\n    return new Network(this.options, networkId);\n  }\n  /**\n   * Retrieves a list of available MCP servers.\n   * @param params - Optional parameters for pagination (limit, offset).\n   * @returns Promise containing the list of MCP servers and pagination info.\n   */\n  getMcpServers(params) {\n    const searchParams = new URLSearchParams();\n    if (params?.limit !== void 0) {\n      searchParams.set(\"limit\", String(params.limit));\n    }\n    if (params?.offset !== void 0) {\n      searchParams.set(\"offset\", String(params.offset));\n    }\n    const queryString = searchParams.toString();\n    return this.request(`/api/mcp/v0/servers${queryString ? `?${queryString}` : \"\"}`);\n  }\n  /**\n   * Retrieves detailed information for a specific MCP server.\n   * @param serverId - The ID of the MCP server to retrieve.\n   * @param params - Optional parameters, e.g., specific version.\n   * @returns Promise containing the detailed MCP server information.\n   */\n  getMcpServerDetails(serverId, params) {\n    const searchParams = new URLSearchParams();\n    if (params?.version) {\n      searchParams.set(\"version\", params.version);\n    }\n    const queryString = searchParams.toString();\n    return this.request(`/api/mcp/v0/servers/${serverId}${queryString ? `?${queryString}` : \"\"}`);\n  }\n  /**\n   * Retrieves a list of tools for a specific MCP server.\n   * @param serverId - The ID of the MCP server.\n   * @returns Promise containing the list of tools.\n   */\n  getMcpServerTools(serverId) {\n    return this.request(`/api/mcp/${serverId}/tools`);\n  }\n  /**\n   * Gets an MCPTool resource instance for a specific tool on an MCP server.\n   * This instance can then be used to fetch details or execute the tool.\n   * @param serverId - The ID of the MCP server.\n   * @param toolId - The ID of the tool.\n   * @returns MCPTool instance.\n   */\n  getMcpServerTool(serverId, toolId) {\n    return new MCPTool(this.options, serverId, toolId);\n  }\n  /**\n   * Gets an A2A client for interacting with an agent via the A2A protocol\n   * @param agentId - ID of the agent to interact with\n   * @returns A2A client instance\n   */\n  getA2A(agentId) {\n    return new A2A(this.options, agentId);\n  }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mastra/client-js/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mastra/core/dist/chunk-SGGPJWRQ.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mastra/core/dist/chunk-SGGPJWRQ.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RuntimeContext: () => (/* binding */ RuntimeContext)\n/* harmony export */ });\n// src/runtime-context/index.ts\nvar RuntimeContext = class {\n  registry = /* @__PURE__ */ new Map();\n  constructor(iterable) {\n    this.registry = new Map(iterable);\n  }\n  /**\n   * set a value with strict typing if `Values` is a Record and the key exists in it.\n   */\n  set(key, value) {\n    this.registry.set(key, value);\n  }\n  /**\n   * Get a value with its type\n   */\n  get(key) {\n    return this.registry.get(key);\n  }\n  /**\n   * Check if a key exists in the container\n   */\n  has(key) {\n    return this.registry.has(key);\n  }\n  /**\n   * Delete a value by key\n   */\n  delete(key) {\n    return this.registry.delete(key);\n  }\n  /**\n   * Clear all values from the container\n   */\n  clear() {\n    this.registry.clear();\n  }\n  /**\n   * Get all keys in the container\n   */\n  keys() {\n    return this.registry.keys();\n  }\n  /**\n   * Get all values in the container\n   */\n  values() {\n    return this.registry.values();\n  }\n  /**\n   * Get all entries in the container\n   */\n  entries() {\n    return this.registry.entries();\n  }\n  /**\n   * Get the size of the container\n   */\n  size() {\n    return this.registry.size;\n  }\n  /**\n   * Execute a function for each entry in the container\n   */\n  forEach(callbackfn) {\n    this.registry.forEach(callbackfn);\n  }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hc3RyYS9jb3JlL2Rpc3QvY2h1bmstU0dHUEpXUlEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwQiIsInNvdXJjZXMiOlsiL2hvbWUvbXRhaGFzeWxtei9EZXNrdG9wL3Vwc3Rhc2gvbWFzdHJhL3dpdGhBcGkvbm9kZV9tb2R1bGVzL0BtYXN0cmEvY29yZS9kaXN0L2NodW5rLVNHR1BKV1JRLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9ydW50aW1lLWNvbnRleHQvaW5kZXgudHNcbnZhciBSdW50aW1lQ29udGV4dCA9IGNsYXNzIHtcbiAgcmVnaXN0cnkgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdHJ1Y3RvcihpdGVyYWJsZSkge1xuICAgIHRoaXMucmVnaXN0cnkgPSBuZXcgTWFwKGl0ZXJhYmxlKTtcbiAgfVxuICAvKipcbiAgICogc2V0IGEgdmFsdWUgd2l0aCBzdHJpY3QgdHlwaW5nIGlmIGBWYWx1ZXNgIGlzIGEgUmVjb3JkIGFuZCB0aGUga2V5IGV4aXN0cyBpbiBpdC5cbiAgICovXG4gIHNldChrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5yZWdpc3RyeS5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHZhbHVlIHdpdGggaXRzIHR5cGVcbiAgICovXG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5nZXQoa2V5KTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBrZXkgZXhpc3RzIGluIHRoZSBjb250YWluZXJcbiAgICovXG4gIGhhcyhrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5oYXMoa2V5KTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgdmFsdWUgYnkga2V5XG4gICAqL1xuICBkZWxldGUoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0cnkuZGVsZXRlKGtleSk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFyIGFsbCB2YWx1ZXMgZnJvbSB0aGUgY29udGFpbmVyXG4gICAqL1xuICBjbGVhcigpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5LmNsZWFyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbGwga2V5cyBpbiB0aGUgY29udGFpbmVyXG4gICAqL1xuICBrZXlzKCkge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmtleXMoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCB2YWx1ZXMgaW4gdGhlIGNvbnRhaW5lclxuICAgKi9cbiAgdmFsdWVzKCkge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LnZhbHVlcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYWxsIGVudHJpZXMgaW4gdGhlIGNvbnRhaW5lclxuICAgKi9cbiAgZW50cmllcygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5lbnRyaWVzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgc2l6ZSBvZiB0aGUgY29udGFpbmVyXG4gICAqL1xuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LnNpemU7XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGUgYSBmdW5jdGlvbiBmb3IgZWFjaCBlbnRyeSBpbiB0aGUgY29udGFpbmVyXG4gICAqL1xuICBmb3JFYWNoKGNhbGxiYWNrZm4pIHtcbiAgICB0aGlzLnJlZ2lzdHJ5LmZvckVhY2goY2FsbGJhY2tmbik7XG4gIH1cbn07XG5cbmV4cG9ydCB7IFJ1bnRpbWVDb250ZXh0IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mastra/core/dist/chunk-SGGPJWRQ.js\n");

/***/ })

};
;